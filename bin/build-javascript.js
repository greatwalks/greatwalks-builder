/*global process require __dirname Buffer*/
"use strict"; /* Ignore this JSLint complaint, it's a bit stupid*/
var fs = require('fs'),
    path = require('path'),
    approot = path.dirname(__dirname),
    greatwalks_repo = path.join(path.dirname(approot), "greatwalks"),
    // Twitter Bootstrap JavaScript needs to be aggregated in a particular order
    bootstrap_javascripts = ['bootstrap-transition.js', 'bootstrap-alert.js',
        'bootstrap-modal.js', 'bootstrap-dropdown.js', 'bootstrap-scrollspy.js',
        'bootstrap-tab.js', 'bootstrap-tooltip.js', 'bootstrap-popover.js',
        'bootstrap-button.js', 'bootstrap-collapse.js', 'bootstrap-carousel.js',
        'bootstrap-typeahead.js', 'bootstrap-affix.js'],
    bootstrap_javascript_path,
    app_javascripts = fs.readdirSync(path.join(approot, "javascript")),
    app_javascript_path,
    ignore_names = ["Thumbs.db", ".DS_Store"],
    copyFileSync = function(srcFile, destFile) {
      //via http://procbits.com/2011/11/15/synchronous-file-copy-in-node-js/
      var BUF_LENGTH, buff, bytesRead, fdr, fdw, pos;
      BUF_LENGTH = 64 * 1024;
      buff = new Buffer(BUF_LENGTH);
      fdr = fs.openSync(srcFile, 'r');
      fdw = fs.openSync(destFile, 'w');
      bytesRead = 1;
      pos = 0;
      while (bytesRead > 0) {
        bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);
        fs.writeSync(fdw, buff, 0, bytesRead);
        pos += bytesRead;
      }
      fs.closeSync(fdr);
      return fs.closeSync(fdw);
    },
    file_handle,
    i;

// copy over the Phonegap vendor JavaScript
copyFileSync(path.join(approot, "javascript/cordova/android.js"), path.join(greatwalks_repo, "cordova.js"));


// Agregate Bootstrap JavaScript
file_handle = fs.openSync(path.join(greatwalks_repo, "js/vendor/bootstrap.js"), 'w');
fs.writeSync(file_handle, "/*This file is built from source files. Please do not edit this file directly*/\n\n\n");
for(i = 0; i < bootstrap_javascripts.length; i++){
    bootstrap_javascript_path = path.join(approot, "javascript/bootstrap-javascript", bootstrap_javascripts[i]);
    fs.writeSync(file_handle, fs.readFileSync(bootstrap_javascript_path, 'utf8').toString());
}
fs.closeSync(file_handle);

// Agregate App JavaScript
file_handle = fs.openSync(path.join(greatwalks_repo, "js/app.js"), 'w');
fs.writeSync(file_handle, "/*This file is built from source files. Please do not edit this file directly*/\n\n\n");
for(i = 0; i < app_javascripts.length; i++){
    app_javascript_path = path.join(approot, "javascript", app_javascripts[i]);
    if(!fs.statSync(app_javascript_path).isDirectory()) {
        fs.writeSync(file_handle, "/* BEGINNING OF " + path.basename(app_javascript_path) + " */\n" + fs.readFileSync(app_javascript_path, 'utf8').toString() + "/* END OF " + path.basename(app_javascript_path) + " */\n\n");
    }
}
fs.closeSync(file_handle);

